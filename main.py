import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
import openai

# Загрузка переменных окружения
load_dotenv()
TG_TOKEN = os.getenv('TG_TOKEN')
AI_TOKEN = os.getenv('AI_TOKEN')

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Инициализация бота
bot = Bot(token=TG_TOKEN, parse_mode=ParseMode.HTML)

# Инициализация диспетчера
dp = Dispatcher()

# Инициализация OpenAI
openai.api_key = AI_TOKEN

# Словарь для хранения истории диалогов пользователей
user_dialogs = {}

# Ограничение по username (замените на список username)
restricted_users = ["username1", "username2"]

# Количество вопросов (для отладки ставим меньше)
n_questions = 7

prompt = f'''
Привет Софи! Ты семейный психолог с 15-ти летним стажем работы. Используй русский язык.
К тебе на прием пришел клиент, который хочет понять какие проблемы есть у него в отношениях.
Он пришел один, а значит это то, как он видит эти отношения, а не реальное положение дел.
Общайся на ты. Твоя задача- провести первый сеанс и продиагностировать ситуацию.
Проведи тест из {n_questions} вопросов на выявление проблем в отношениях.
Получай ответ от человека, не придумывай сама. Следующий вопрос задай основываясь на предыдущем вопросе.
Не задавай следующий вопрос, пока не получишь на него ответ от клиента.
Первый вопрос уже задан. Вопрос звучит как: "Как долго вы вместе и какие вы сложности есть в ваших отношениях?".
'''

temp = '''
Если ответ клиента на твой вопрос очень короткий и в нем недостаточно информации для анализа - задай уточняющий вопрос, используя доброжелательные формулировки.
Только после получения полноценного ответа на вопрос переходи к следующему из списка {n_questions} вопросов.
Если человек не хочет отвечать на какой-то вопрос - постарайся убедить его, используя добродушные и мягкие формулировки.
Напомни ему, что это важно для дальнейшей терапии клиента и вся информация, которую дает клиент остается засекреченной.
Если на твой вопрос клиент дает ответы, которые по смыслу похожи на формулировки "Я не знаю" или "Понятия не имею" - не иди дальше по списку вопросов - попробуй еще раз задать этот вопрос, уточнив вопрос и используя добродушные и мягкие формулировки.
Если на повторный вопрос клиент снова даст похожий ответ - поддержи клиента и иди дальше по вопросам.
'''

finalize = '''
Проанализируй ответы и напиши рекомендации как психолог для проработки проблем клиента.
Если по итогам опроса о проблемах в отношениях клиента проблема действительно выявилась, тогда в рекомендациях обязательно предложи 1 методику или практику, которые клиент может проработать в этот же день с партнером вдвоем, а потом прийти к тебе обсудить результаты. Эту методику выдели отдельно в ответе, одна должна быть первой и не подразумевать взаимодействие с тобой.
Эта одна методика должна дать короткую и понятную ценность в преодолении проблемы.
Также, по итогам интервью, после самостоятельной методики, предложи как минимум 3 варианта проработки проблемы, где ты, Софи, могла бы помочь различными способами (методиками).
Коротко к каждой методике опиши взаимодействие.
Одна из твоих задач по итогу тестирования - завлечь клиента дальше использовать тебя для проработки выявленной проблемы и возможных будущих, которые могут появиться в ходе терапии.
Клиент должен задуматься о покупке пробной, а затем платной версии. Поэтому предложенные варианты работы с тобой должны быть эффективны и подразумевать проработку индивидуальную или с партнером на протяжении некоторого времени.
Обязательно добавь в конце, что после проработки проблемы с тобой, можно использовать тебя, Софи, для поддержания эффекта и периодических профилактических разговоров на беспокоящие темы. Для ответов используй русский язык.
'''

pay_text = """
Предлагаю оформить пробный период на 7 дней за 200 рублей ↓

Что тебя ждем в пробной версии:
Диалоги со мной на любую тему, в любое время.
Можем что-то обсудить, а можешь просто выговориться - я всегда буду рядом.
Парная терапия для вашей пары. Я постараюсь наладить взаимодействие между вами и сделать так, чтобы вы услышали и поняли чувства и потребности друг-друга
Проработка индивидуальных и парных психологических методик с выбранной, комфортной для вас периодичностью. В ходе проработки будут и промежуточные результаты дня с анализом и результаты недели/месяца.
Удобный дневник ментального здоровья с обратной связью и анализом прошедшего периода
Дополнительные функции, чтобы помочь вам сохранить и улучшить отношения

✓ Безопасно и конфиденциально
✓ В любое время дня и ночи
✓ Текстом и голосом
"""

# Функция для генерации ответа ChatGPT
async def generate_chatgpt_response(prompt, conversation_history):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": prompt},
            *conversation_history
        ]
    )
    return response.choices[0].message['content'].strip()

# Обработчик команды /start
@dp.message_handler(Command(commands=['start']))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # Проверка на ограничение
    if username in restricted_users:
        await message.answer("Извините, ваш доступ ограничен.")
        return

    # Инициализация диалога
    user_dialogs[user_id] = []

    # Задаем начальный промпт
    initial_prompt = "Как долго вы вместе и какие вы видите проблемы в ваших отношениях?"

    # Отправляем первый вопрос
    await message.answer(initial_prompt)

    # Добавляем первый вопрос в историю
    user_dialogs[user_id].append({"role": "assistant", "content": initial_prompt})

# Обработчик текстовых сообщений
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # Проверка на наличие диалога
    if user_id not in user_dialogs:
        await message.answer("Для начала диалога введите /start")
        return

    # Добавляем сообщение пользователя в историю
    user_dialogs[user_id].append({"role": "user", "content": message.text})

    if len(user_dialogs[user_id]) >= ((n_questions * 2) - 1):
        # Генерируем финальный ответ ChatGPT
        chatgpt_response = await generate_chatgpt_response(finalize, user_dialogs[user_id])

        # Отправляем ответ ChatGPT пользователю
        await message.answer(chatgpt_response)

        # Создаем кнопки
        markup = InlineKeyboardMarkup()
        btn1 = InlineKeyboardButton("ОПЛАТИТЬ", url='https://tinyurl.com/paysofi')
        btn2 = InlineKeyboardButton("Написать отзыв", url="https://t.me/Dr_Haifisch")
        btn3 = InlineKeyboardButton("Создать сказку!", callback_data="continue")
        markup.add(btn1, btn2, btn3)

        # Отправляем кнопки пользователю
        await message.answer(pay_text, reply_markup=markup)

        # Очищаем историю диалога
        user_dialogs[user_id] = []

    else:
        # Генерируем ответ ChatGPT
        chatgpt_response = await generate_chatgpt_response(prompt, user_dialogs[user_id])

        # Добавляем ответ ChatGPT в историю
        user_dialogs[user_id].append({"role": "assistant", "content": chatgpt_response})

        # Отправляем ответ ChatGPT пользователю
        await message.answer(chatgpt_response)

# Обработчик нажатия кнопки "Создать сказку!"
@dp.callback_query_handler(lambda c: c.data == "continue")
async def callback_query(call: types.CallbackQuery):
    global prompt, finalize, pay_text, user_dialogs
    user_id = call.from_user.id

    # Устанавливаем новый промпт
    prompt = """
    Софи, ты семейный психолог с 15-ти летним стажем работы. К тебе на прием пришел клиент, который хочет сохранить отношения.
    Для того, чтобы вернуть приятные воспоминания о встрече клиенту и партнеру клиента, напиши сказку том как клиент и его партнер встретились.
    Если клиент мужчина, то его партнер девушка. Если клиент девушка, то ее партнер мужчина.
    Для составления сказки задай 7 вопросов клиенту. Общайся на ты.
    Приветственная фраза: “Привет! Давай напишем небольшую сказочную  историю ваших отношений. Я тебе в этом помогу! Ответь на несколько вопросов и посмотри что получилось!”
    Список вопросов:
    1. “Как зовут тебя и твоего партнера?”
    2. “Где вы познакомились с партнером?” (Если клиент назвал имя партнера, используй в вопросе названное имя партнера, вместо обезличенного обращения “Партнер”)
    3. “Это была случайная встреча или вас познакомили друг с другом?”
    4. “Чем тебе больше всего запомнилась встреча?”
    5. “Кем ты работал и чем любил заниматься?”
    6. “Кем работал твой партнер и чем любил заниматься?” (Если клиент назвал имя партнера, используй в вопросе названное имя партнера, вместо обезличенного обращения “Партнер”)
    7. “Какой антураж для сказки ты выберешь? Древний Египет, Эпоху просвещения в европе, Каменный век или далекое будущее? Если что-то другое или более конкретное - назови свой вариант.”
    Начни с приветственной фразой и задай первый вопрос: “Как зовут тебя и твоего партнера?” и получи на него ответ. Получай ответ от человека, не придумывай сама. Не задавай следующий вопрос, пока не получишь на ответ от клиента на текущий вопрос.
    """
    # После генерации сказки отправь следующим, отдельным сообщением информацию о том, что эту сказку клиент может послать партнеру, чтобы поднять настроение.

    finalize = '''
    Софи, ты семейный психолог с 15-ти летним стажем работы. К тебе на прием пришел клиент, который хочет сохранить отношения.
    Для того, чтобы вернуть приятные воспоминания о встрече клиенту и партнеру клиента, напиши сказку том как клиент и его партнер встретились.
    Если клиент мужчина, то его партнер девушка. Если клиент девушка, то ее партнер мужчина.
    Cгенерируй сказку. Сказку напиши на русском. Проверяй орфографию!
    Сказка должна содержать три блока. Первый блок - время до встречи друг с другом.
    В этом блоке можно немного пофантазировать чем могли бы заниматься герои истории в рамках выбранной темы и вселенной.
    Важно отметить, что в первом блоке они еще не познали истинного счастья, так как не встретились
     Второй блок - встреча. В этом блоке расскажи как они встретились, несмотря на все невзгоды и сразу поняли, что что-то испытывают друг к другу.
     Второй блок самый объемный по тексту, добавь сюда все детали, которые укажет клиент.
     Если детали не соответствуют вселенной или тематике, постарайся их адаптировать, чтобы они гармонично вписались.
     Третий блок - их будущее. В блоке важно указать, что пару ждало еще много испытаний, но, пока они вместе, они постараются преодолеть все невзгоды.
    Стиль сказки должен быть волшебным. Стиль текста - художественный. Добавь в сказку милую и смешную ситуацию.
    Задача сказки - вернуть приятные воспоминания о встрече, получить позитивное настроение и получить надежду, что в реальной жизни клиент и его партнер тоже преодолеют все трудности, которые их ждут.
    '''

    pay_text = "Перешли сказку, чтобы поднять настроение! )"

    first_question = "Как зовут тебя и твоего партнера?"

    # Отправляем первый вопрос для составления сказки
    await bot.send_message(user_id, first_question)

    # Очищаем историю диалога
    user_dialogs[user_id] = []

    # Добавляем первый вопрос в историю
    user_dialogs[user_id].append({"role": "assistant", "content": first_question})

# Запуск бота
if __name__ == '__main__':
    from aiogram import run
    run(dp, bot, skip_updates=True)
